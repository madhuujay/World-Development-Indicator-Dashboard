---
title: "Madhumathi_23101_3"
format: html
editor: visual
---

```{r}
library(WDI)
library(readxl)
library(tidyverse)
library(dplyr)
```

```{r}
# Load necessary library
library(dplyr)

# Read the input CSV file
input_file <- "/Users/madhu/Downloads/wdi_data.csv"  # Replace with your input file name
data <- read.csv(input_file)

# Define the required countries and indicators
countries <- c("Afghanistan", "Armenia", "Azerbaijan", "Bahrain", "Bangladesh", "Bhutan",
               "Brunei Darussalam", "Cambodia", "China", "Cyprus", "Georgia", "India",
               "Indonesia", "Iran, Islamic Rep.", "Iraq", "Israel", "Japan", "Jordan",
               "Kazakhstan", "Korea, Dem. People's Rep.", "Korea, Rep.", "Kuwait",
               "Kyrgyz Republic", "Lao PDR", "Lebanon", "Malaysia", "Maldives",
               "Mongolia", "Myanmar", "Nepal", "Oman", "Pakistan", "Philippines",
               "Qatar", "Saudi Arabia", "Singapore", "Sri Lanka", "Syrian Arab Republic",
               "Tajikistan", "Thailand", "Timor-Leste", "Turkiye", "Turkmenistan",
               "United Arab Emirates", "Uzbekistan", "Viet Nam", "Yemen, Rep.")

indicators <- c("Electric power consumption (kWh per capita)",
                "Electric power transmission and distribution losses (% of output)",
                "Electricity production from coal sources (% of total)",
                "Electricity production from hydroelectric sources (% of total)",
                "Electricity production from natural gas sources (% of total)",
                "Electricity production from nuclear sources (% of total)",
                "Electricity production from oil sources (% of total)",
                "Electricity production from oil, gas and coal sources (% of total)",
                "Electricity production from renewable sources, excluding hydroelectric (% of total)",
                "Electricity production from renewable sources, excluding hydroelectric (kWh)")

# Filter data for the required countries and indicators
filtered_data <- data %>%
  filter(Country_Name %in% countries, Indicator_Name %in% indicators)

# Fill missing values with a dummy value (e.g., 0 or "Missing")
filtered_data <- filtered_data %>%
  mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))

# Save the filtered data to a new CSV file
output_file <- "/Users/madhu/Downloads/DVC_2/filtered_data.csv"
write.csv(filtered_data, output_file, row.names = FALSE)

# Message to confirm
cat("Filtered CSV file 'filtered_data.csv' created successfully!\n")

```

```{r}
# Check for missing values
summary(filtered_data)

# Count missing values per column
colSums(is.na(filtered_data))

# Check for alternative missing value codes (e.g., empty strings, -999, etc.)
table(filtered_data$Country_Code)
table(filtered_data$Indicator_Code)
```

```{r}
# Inspect column names
colnames(filtered_data)
```

```{r}
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(tidyr)
library(DT)

# Read the output data file (your filtered CSV file)
data <- read.csv("/Users/madhu/Downloads/wdi_data.csv")  # Replace with your file path

# Ensure the Year columns are named correctly
year_columns <- grep("^X[0-9]{4}$", names(data), value = TRUE)  # Select columns with year names like X1960, X1961, etc.

# UI for the Shiny app
ui <- fluidPage(
  titlePanel("Interactive Dashboard for Country Indicators"),
  
  # Sidebar for selecting country, indicator, and year
  sidebarLayout(
    sidebarPanel(
      selectInput("country", "Select Country:",
                  choices = unique(data$Country_Name), selected = unique(data$Country_Name)[1], multiple = TRUE),
      selectInput("indicator", "Select Indicator:",
                  choices = unique(data$Indicator_Name), selected = unique(data$Indicator_Name)[1]),
      sliderInput("year", "Select Year:",
                  min = 1960, max = 2023,
                  value = c(1960, 2023), step = 1,
                  animate = animationOptions(interval = 1000, loop = TRUE))
    ),
    
    # Main panel for displaying the plot and table
    mainPanel(
      plotlyOutput("plot"),
      DTOutput("rank_table")  # Add the table output here
    )
  )
)

# Server function to generate the plot based on user inputs
server <- function(input, output) {
  
  # Reactive expression to filter the data based on user inputs
  filtered_data <- reactive({
    data %>%
      filter(Country_Name %in% input$country,  # Filter based on selected countries
             Indicator_Name == input$indicator) %>%
      select(Country_Name, Indicator_Name, year_columns) %>%
      gather(key = "Year", value = "Value", -Country_Name, -Indicator_Name) %>%
      filter(Year %in% paste0("X", input$year[1]:input$year[2])) %>%
      mutate(Year = gsub("X", "", Year)) %>%
      mutate(Year = as.numeric(Year)) %>%
      filter(Value != 0)  # Remove rows where Value is 0
  })
  
  # Render the plot (Bar Graph)
  output$plot <- renderPlotly({
    req(filtered_data())  # Ensure the filtered data is available
    
    # Create the bar plot using ggplot2
    p <- ggplot(filtered_data(), aes(x = Country_Name, y = Value, fill = Country_Name)) +
      geom_bar(stat = "identity", position = "dodge") +
      labs(title = paste(input$indicator, "for selected countries"),
           x = "Country", y = "Indicator Value") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
    
    # Convert ggplot to a Plotly object for interactivity
    ggplotly(p)
  })
  
  # Render the ranking table
  output$rank_table <- renderDT({
    req(filtered_data())  # Ensure the filtered data is available
    
    # Calculate rankings based on the values (sum of the values for each country)
    rank_data <- filtered_data() %>%
      group_by(Country_Name) %>%
      summarise(Total_Value = sum(Value)) %>%
      arrange(desc(Total_Value)) %>%
      mutate(Rank = rank(-Total_Value))  # Rank countries based on the total value in descending order
    
    # Return the table
    datatable(rank_data, options = list(pageLength = 10, order = list(list(2, 'desc'))))
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```
